D G "__PCH__" 0 0 ""5.056d""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""10-3-16""
D G "__TIME__" 0 0 ""12:53:11""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__18F14K50" 0 0 "1" "Standard Header file for the PIC18LF14K50 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `54 
f B "set_tris_a" 2 45 "void(int8 value)" `53 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `56 
f B "set_tris_b" 2 46 "void(int8 value)" `55 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `58 
f B "set_tris_c" 2 47 "void(int8 value)" `57 
f N "get_tris_a" 2 48 ""
f B "get_tris_a" 2 48 "int8()" `59 
f N "get_tris_b" 2 49 ""
f B "get_tris_b" 2 49 "int8()" `60 
f N "get_tris_c" 2 50 ""
f B "get_tris_c" 2 50 "int8()" `61 
f N "output_a" 2 51 ""
v L "value" 2 51 "int8" `63 
f B "output_a" 2 51 "void(int8 value)" `62 
f N "output_b" 2 52 ""
v L "value" 2 52 "int8" `65 
f B "output_b" 2 52 "void(int8 value)" `64 
f N "output_c" 2 53 ""
v L "value" 2 53 "int8" `67 
f B "output_c" 2 53 "void(int8 value)" `66 
f N "input_a" 2 54 ""
f B "input_a" 2 54 "int8()" `68 
f N "input_b" 2 55 ""
f B "input_b" 2 55 "int8()" `69 
f N "input_c" 2 56 ""
f B "input_c" 2 56 "int8()" `70 
f N "input_change_a" 2 57 ""
f B "input_change_a" 2 57 "int8()" `71 
f N "input_change_b" 2 58 ""
f B "input_change_b" 2 58 "int8()" `72 
f N "input_change_c" 2 59 ""
f B "input_change_c" 2 59 "int8()" `73 
f N "port_a_pullups" 2 60 ""
v L "upmask" 2 60 "int8" `75 
f B "port_a_pullups" 2 60 "void(int8 upmask)" `74 
f N "port_b_pullups" 2 61 ""
v L "upmask" 2 61 "int8" `77 
f B "port_b_pullups" 2 61 "void(int8 upmask)" `76 
f N "input" 2 62 ""
v L "pin" 2 62 "int16" `79 
f B "input" 2 62 "int8(int16 pin)" `78 
f N "input_state" 2 63 ""
v L "pin" 2 63 "int16" `81 
f B "input_state" 2 63 "int8(int16 pin)" `80 
f N "output_low" 2 64 ""
v L "pin" 2 64 "int16" `83 
f B "output_low" 2 64 "void(int16 pin)" `82 
f N "output_high" 2 65 ""
v L "pin" 2 65 "int16" `85 
f B "output_high" 2 65 "void(int16 pin)" `84 
f N "output_toggle" 2 66 ""
v L "pin" 2 66 "int16" `87 
f B "output_toggle" 2 66 "void(int16 pin)" `86 
f N "output_bit" 2 67 ""
v L "pin" 2 67 "int16" `89 
v L "level" 2 67 "int8" `90 
f B "output_bit" 2 67 "void(int16 pin,int8 level)" `88 
f N "output_float" 2 68 ""
v L "pin" 2 68 "int16" `92 
f B "output_float" 2 68 "void(int16 pin)" `91 
f N "output_drive" 2 69 ""
v L "pin" 2 69 "int16" `94 
f B "output_drive" 2 69 "void(int16 pin)" `93  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 73 "31744"
d G "PIN_A1" 2 74 "31745"
d G "PIN_A3" 2 75 "31747"
d G "PIN_A4" 2 76 "31748"
d G "PIN_A5" 2 77 "31749"
d G "PIN_B4" 2 79 "31756"
d G "PIN_B5" 2 80 "31757"
d G "PIN_B6" 2 81 "31758"
d G "PIN_B7" 2 82 "31759"
d G "PIN_C0" 2 84 "31760"
d G "PIN_C1" 2 85 "31761"
d G "PIN_C2" 2 86 "31762"
d G "PIN_C3" 2 87 "31763"
d G "PIN_C4" 2 88 "31764"
d G "PIN_C5" 2 89 "31765"
d G "PIN_C6" 2 90 "31766"
d G "PIN_C7" 2 91 "31767"
d G "FALSE" 2 94 "0"
d G "TRUE" 2 95 "1"
d G "BYTE" 2 97 "int8"
d G "BOOLEAN" 2 98 "int1"
d G "getc" 2 100 "getch"
d G "fgetc" 2 101 "getch"
d G "getchar" 2 102 "getch"
d G "putc" 2 103 "putchar"
d G "fputc" 2 104 "putchar"
d G "fgets" 2 105 "gets"
d G "fputs" 2 106 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 111 ""
f B "restart_cause" 2 111 "int8()" `95 
f N "reset_cpu" 2 112 ""
f B "reset_cpu" 2 112 "void()" `96 
f N "sleep" 2 113 ""
f B "sleep" 2 113 "void()" `97 
f N "sleep" 2 114 ""
v L "type" 2 114 "int8" `99 
f B "sleep" 2 114 "void(int8 type)" `98  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 116 "7"
d G "MCLR_FROM_SLEEP" 2 117 "11"
d G "MCLR_FROM_RUN" 2 118 "15"
d G "NORMAL_POWER_UP" 2 119 "12"
d G "BROWNOUT_RESTART" 2 120 "14"
d G "WDT_FROM_SLEEP" 2 121 "3"
d G "RESET_INSTRUCTION" 2 122 "0"
d G "SLEEP_FULL" 2 125 "0" "Default"
d G "SLEEP_IDLE" 2 126 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 133 ""
v L "mode" 2 133 "int8" `101 
f B "setup_timer_0" 2 133 "void(int8 mode)" `100 
f N "set_timer0" 2 134 ""
v L "value" 2 134 "int16" `103 
f B "set_timer0" 2 134 "void(int16 value)" `102 
f N "get_timer0" 2 135 ""
f B "get_timer0" 2 135 "int16()" `104 
f N "setup_counters" 2 136 ""
v L "mode" 2 136 "int8" `106 
v L "prescaler" 2 136 "int8" `107 
f B "setup_counters" 2 136 "void(int8 mode,int8 prescaler)" `105 
f N "set_rtcc" 2 137 ""
v L "value" 2 137 "int16" `109 
f B "set_rtcc" 2 137 "void(int16 value)" `108 
f N "get_rtcc" 2 138 ""
f B "get_rtcc" 2 138 "int16()" `110  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 140 "0"
d G "T0_EXT_L_TO_H" 2 141 "32"
d G "T0_EXT_H_TO_L" 2 142 "48"
d G "T0_DIV_1" 2 144 "8"
d G "T0_DIV_2" 2 145 "0"
d G "T0_DIV_4" 2 146 "1"
d G "T0_DIV_8" 2 147 "2"
d G "T0_DIV_16" 2 148 "3"
d G "T0_DIV_32" 2 149 "4"
d G "T0_DIV_64" 2 150 "5"
d G "T0_DIV_128" 2 151 "6"
d G "T0_DIV_256" 2 152 "7"
d G "T0_OFF" 2 154 "0x80"
d G "T0_8_BIT" 2 156 "0x40"
d G "RTCC_INTERNAL" 2 160 "0"
d G "RTCC_EXT_L_TO_H" 2 161 "32"
d G "RTCC_EXT_H_TO_L" 2 162 "48"
d G "RTCC_DIV_1" 2 163 "8"
d G "RTCC_DIV_2" 2 164 "0"
d G "RTCC_DIV_4" 2 165 "1"
d G "RTCC_DIV_8" 2 166 "2"
d G "RTCC_DIV_16" 2 167 "3"
d G "RTCC_DIV_32" 2 168 "4"
d G "RTCC_DIV_64" 2 169 "5"
d G "RTCC_DIV_128" 2 170 "6"
d G "RTCC_DIV_256" 2 171 "7"
d G "RTCC_OFF" 2 172 "0x80"
d G "RTCC_8_BIT" 2 173 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 184 ""
v L "mode" 2 184 "int16" `112 
f B "setup_wdt" 2 184 "void(int16 mode)" `111 
f N "restart_wdt" 2 185 ""
f B "restart_wdt" 2 185 "void()" `113  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 187 "0x100"
d G "WDT_OFF" 2 188 "0"
d G "WDT_4MS" 2 190 "0x300"
d G "WDT_8MS" 2 191 "0x500"
d G "WDT_16MS" 2 192 "0x700"
d G "WDT_32MS" 2 193 "0x900"
d G "WDT_64MS" 2 194 "0xB00"
d G "WDT_128MS" 2 195 "0xD00"
d G "WDT_256MS" 2 196 "0xF00"
d G "WDT_512MS" 2 197 "0x1100"
d G "WDT_1S" 2 198 "0x1300"
d G "WDT_2S" 2 199 "0x1500"
d G "WDT_4S" 2 200 "0x1700"
d G "WDT_8S" 2 201 "0x1900"
d G "WDT_16" 2 202 "0x1B00"
d G "WDT_32S" 2 203 "0x1D00"
d G "WDT_64S" 2 204 "0x1F00"
d G "WDT_128S" 2 205 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 210 ""
v L "mode" 2 210 "int16" `115 
f B "setup_timer_1" 2 210 "void(int16 mode)" `114 
f N "get_timer1" 2 211 ""
f B "get_timer1" 2 211 "int16()" `116 
f N "set_timer1" 2 212 ""
v L "value" 2 212 "int16" `118 
f B "set_timer1" 2 212 "void(int16 value)" `117  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 215 "0"
d G "T1_INTERNAL" 2 216 "0x85"
d G "T1_EXTERNAL" 2 217 "0x87"
d G "T1_EXTERNAL_SYNC" 2 218 "0x83"
d G "T1_CLK_OUT" 2 220 "8"
d G "T1_DIV_BY_1" 2 222 "0"
d G "T1_DIV_BY_2" 2 223 "0x10"
d G "T1_DIV_BY_4" 2 224 "0x20"
d G "T1_DIV_BY_8" 2 225 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 230 ""
v L "mode" 2 230 "int8" `120 
v L "period" 2 230 "int8" `121 
v L "postscale" 2 230 "int8" `122 
f B "setup_timer_2" 2 230 "void(int8 mode,int8 period,int8 postscale)" `119 
f N "get_timer2" 2 231 ""
f B "get_timer2" 2 231 "int8()" `123 
f N "set_timer2" 2 232 ""
v L "value" 2 232 "int8" `125 
f B "set_timer2" 2 232 "void(int8 value)" `124  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 234 "0"
d G "T2_DIV_BY_1" 2 235 "4"
d G "T2_DIV_BY_4" 2 236 "5"
d G "T2_DIV_BY_16" 2 237 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 242 ""
v L "mode" 2 242 "int16" `127 
f B "setup_timer_3" 2 242 "void(int16 mode)" `126 
f N "get_timer3" 2 243 ""
f B "get_timer3" 2 243 "int16()" `128 
f N "set_timer3" 2 244 ""
v L "value" 2 244 "int16" `130 
f B "set_timer3" 2 244 "void(int16 value)" `129  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 247 "0"
d G "T3_INTERNAL" 2 248 "0x85"
d G "T3_EXTERNAL" 2 249 "0x87"
d G "T3_EXTERNAL_SYNC" 2 250 "0x83"
d G "T3_DIV_BY_1" 2 252 "0"
d G "T3_DIV_BY_2" 2 253 "0x10"
d G "T3_DIV_BY_4" 2 254 "0x20"
d G "T3_DIV_BY_8" 2 255 "0x30"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 261 ""
v L "mode" 2 261 "int32" `132 
f B "setup_ccp1" 2 261 "void(int32 mode)" `131 
f N "setup_ccp1" 2 262 ""
v L "mode" 2 262 "int32" `134 
v L "pwm" 2 262 "int8" `135 
f B "setup_ccp1" 2 262 "void(int32 mode,int8 pwm)" `133 
f N "set_pwm1_duty" 2 263 ""
v L "value" 2 263 "int16" `137 
f B "set_pwm1_duty" 2 263 "void(int16 value)" `136  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 265 "0"
d G "CCP_CAPTURE_FE" 2 266 "0x04"
d G "CCP_CAPTURE_RE" 2 267 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 268 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 269 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 270 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 271 "0x09"
d G "CCP_COMPARE_INT" 2 272 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 273 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 274 "0x0B"
d G "CCP_PWM" 2 275 "0x0C"
d G "CCP_PWM_PLUS_1" 2 276 "0x1c"
d G "CCP_PWM_PLUS_2" 2 277 "0x2c"
d G "CCP_PWM_PLUS_3" 2 278 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 285 "0x0c"
d G "CCP_PWM_H_L" 2 286 "0x0d"
d G "CCP_PWM_L_H" 2 287 "0x0e"
d G "CCP_PWM_L_L" 2 288 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 290 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 291 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 292 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 294 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 295 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 296 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 297 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 298 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 299 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 300 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 302 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 303 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 304 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 306 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 307 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 308 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 310 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 312 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 313 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 314 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 315 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 316 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 320 ""
v L "mode" 2 320 "int32" `142 
f B "setup_ccp2" 2 320 "void(int32 mode)" `141 
f N "setup_ccp2" 2 321 ""
v L "mode" 2 321 "int32" `144 
v L "pwm" 2 321 "int8" `145 
f B "setup_ccp2" 2 321 "void(int32 mode,int8 pwm)" `143 
f N "set_pwm2_duty" 2 322 ""
v L "value" 2 322 "int16" `147 
f B "set_pwm2_duty" 2 322 "void(int16 value)" `146 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 328 ""
v L "mode" 2 328 "int32" `152 
f B "setup_ccp3" 2 328 "void(int32 mode)" `151 
f N "setup_ccp3" 2 329 ""
v L "mode" 2 329 "int32" `154 
v L "pwm" 2 329 "int8" `155 
f B "setup_ccp3" 2 329 "void(int32 mode,int8 pwm)" `153 
f N "set_pwm3_duty" 2 330 ""
v L "value" 2 330 "int16" `157 
f B "set_pwm3_duty" 2 330 "void(int16 value)" `156 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 336 ""
v L "mode" 2 336 "int32" `162 
f B "setup_ccp4" 2 336 "void(int32 mode)" `161 
f N "setup_ccp4" 2 337 ""
v L "mode" 2 337 "int32" `164 
v L "pwm" 2 337 "int8" `165 
f B "setup_ccp4" 2 337 "void(int32 mode,int8 pwm)" `163 
f N "set_pwm4_duty" 2 338 ""
v L "value" 2 338 "int16" `167 
f B "set_pwm4_duty" 2 338 "void(int16 value)" `166 
c L "set_pwm4_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 345 ""
v L "mode" 2 345 "int32" `172 
f B "setup_spi" 2 345 "void(int32 mode)" `171 
f N "spi_write" 2 346 ""
v L "value" 2 346 "int8" `174 
f B "spi_write" 2 346 "void(int8 value)" `173 
f N "spi_read" 2 347 ""
f B "spi_read" 2 347 "int8()" `175 
f N "spi_read" 2 348 ""
v L "value" 2 348 "int8" `177 
f B "spi_read" 2 348 "int8(int8 value)" `176 
f N "spi_data_is_in" 2 349 ""
f B "spi_data_is_in" 2 349 "int8()" `178  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 351 "0x00"
d G "SPI_MASTER" 2 352 "0x20"
d G "SPI_SLAVE" 2 353 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 354 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 355 "0x00"
d G "SPI_CLK_DIV_4" 2 356 "0x00"
d G "SPI_CLK_DIV_16" 2 357 "0x01"
d G "SPI_CLK_DIV_64" 2 358 "0x02"
d G "SPI_CLK_T2" 2 359 "0x03"
d G "SPI_SS_DISABLED" 2 360 "0x01"
d G "SPI_XMIT_L_TO_H" 2 362 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 363 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 365 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 366 "0x8000"
d G "SPI_L_TO_H" 2 369 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 370 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 374 ""
v L "baud" 2 374 "int32" `180 
f B "setup_uart" 2 374 "void(int32 baud)" `179 
f N "setup_uart" 2 375 ""
v L "baud" 2 375 "int32" `182 
v L "stream" 2 375 "int8" `183 
f B "setup_uart" 2 375 "void(int32 baud,int8 stream)" `181 
f N "setup_uart" 2 376 ""
v L "baud" 2 376 "int32" `185 
v L "stream" 2 376 "int8" `186 
v L "clock" 2 376 "int32" `187 
f B "setup_uart" 2 376 "void(int32 baud,int8 stream,int32 clock)" `184 
f N "set_uart_speed" 2 377 ""
v L "baud" 2 377 "int32" `189 
f B "set_uart_speed" 2 377 "void(int32 baud)" `188 
f N "set_uart_speed" 2 378 ""
v L "baud" 2 378 "int32" `191 
v L "stream" 2 378 "int8" `192 
f B "set_uart_speed" 2 378 "void(int32 baud,int8 stream)" `190 
f N "set_uart_speed" 2 379 ""
v L "baud" 2 379 "int32" `194 
v L "stream" 2 379 "int8" `195 
v L "clock" 2 379 "int32" `196 
f B "set_uart_speed" 2 379 "void(int32 baud,int8 stream,int32 clock)" `193  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 383 "2"
d G "UART_DATA" 2 384 "4"
d G "UART_AUTODETECT" 2 385 "8"
d G "UART_AUTODETECT_NOWAIT" 2 386 "9"
d G "UART_WAKEUP_ON_RDA" 2 387 "10"
d G "UART_SEND_BREAK" 2 388 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 392 ""
v L "mode" 2 392 "int32" `198 
f B "setup_comparator" 2 392 "void(int32 mode)" `197  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 395 "0x404"
d G "NC_NC" 2 396 "0x404"
d G "CP1_AGND_C0" 2 399 "0x4000080"
d G "CP1_C1_C0" 2 400 "0x0100081"
d G "CP1_C2_C0" 2 401 "0x0200082"
d G "CP1_C3_C0" 2 402 "0x0400083"
d G "CP1_AGND_VREF" 2 403 "0x4000084"
d G "CP1_C1_VREF" 2 404 "0x0100085"
d G "CP1_C2_VREF" 2 405 "0x0200086"
d G "CP1_C3_VREF" 2 406 "0x0400087"
d G "CP1_OUT_ON_C4" 2 408 "0x2000020"
d G "CP1_INVERT" 2 409 "0x0000010"
d G "CP1_FAST" 2 410 "0x0000008"
d G "CP2_AGND_C0" 2 413 "0x4008000"
d G "CP2_C1_C0" 2 414 "0x0108100"
d G "CP2_C2_C0" 2 415 "0x0208200"
d G "CP2_C3_C0" 2 416 "0x0408300"
d G "CP2_AGND_VREF" 2 417 "0x4008400"
d G "CP2_C1_VREF" 2 418 "0x0108500"
d G "CP2_C2_VREF" 2 419 "0x0208600"
d G "CP2_C3_VREF" 2 420 "0x0408700"
d G "CP2_OUT_ON_C4" 2 422 "0x0082000"
d G "CP2_INVERT" 2 423 "0x0001000"
d G "CP2_FAST" 2 424 "0x0000800"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 431 ""
v L "mode" 2 431 "int8" `202 
f B "setup_vref" 2 431 "void(int8 mode)" `201  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 433 "0"
d G "VREF_1v024" 2 434 "0x90"
d G "VREF_2v048" 2 435 "0xA0"
d G "VREF_4v096" 2 436 "0xB0"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 440 ""
v L "mode" 2 440 "int8" `204 
f B "setup_low_volt_detect" 2 440 "void(int8 mode)" `203  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 442 "0x1F"
d G "LVD_45" 2 443 "0x1E"
d G "LVD_42" 2 444 "0x1D"
d G "LVD_40" 2 445 "0x1C"
d G "LVD_38" 2 446 "0x1B"
d G "LVD_36" 2 447 "0x1A"
d G "LVD_35" 2 448 "0x19"
d G "LVD_33" 2 449 "0x18"
d G "LVD_30" 2 450 "0x17"
d G "LVD_28" 2 451 "0x16"
d G "LVD_27" 2 452 "0x15"
d G "LVD_25" 2 453 "0x14"
d G "LVD_24" 2 454 "0x13"
d G "LVD_23" 2 455 "0x12"
d G "LVD_22" 2 456 "0x11"
d G "LVD_21" 2 457 "0x10"
c L "setup_low_volt_detect" 2 3 3 "FUNCTION"
f N "setup_dac" 2 462 ""
v L "mode" 2 462 "int8" `206 
f B "setup_dac" 2 462 "void(int8 mode)" `205 
f N "dac_write" 2 463 ""
v L "value" 2 463 "int8" `208 
f B "dac_write" 2 463 "void(int8 value)" `207  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 465 "0"
d G "DAC_VSS_VDD" 2 466 "0x80"
d G "DAC_VREF_VDD" 2 467 "0x81"
d G "DAC_VSS_VREF" 2 468 "0x84"
d G "DAC_VREF_VREF" 2 469 "0x85"
d G "DAC_VSS_FVR" 2 470 "0x88"
d G "DAC_VREF_FVR" 2 471 "0x89"
d G "DAC_OUTPUT" 2 473 "0x20"
d G "DAC_LVP_POS" 2 474 "0x40"
d G "DAC_LVP_NEG" 2 475 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 480 ""
v L "mode" 2 480 "int16" `210 
f B "setup_oscillator" 2 480 "int8(int16 mode)" `209 
f N "setup_oscillator" 2 481 ""
v L "mode" 2 481 "int16" `212 
v L "tune" 2 481 "sint8" `213 
f B "setup_oscillator" 2 481 "int8(int16 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 2 483 "0x4000"
d G "OSC_PLL_OFF" 2 484 "0"
d G "OSC_31250" 2 485 "0x8000"
d G "OSC_31KHZ" 2 486 "0x00"
d G "OSC_250KHZ" 2 487 "0x10"
d G "OSC_500KHZ" 2 488 "0x20"
d G "OSC_1MHZ" 2 489 "0x30"
d G "OSC_2MHZ" 2 490 "0x40"
d G "OSC_4MHZ" 2 491 "0x50"
d G "OSC_8MHZ" 2 492 "0x60"
d G "OSC_16MHZ" 2 493 "0x70"
d G "OSC_32MHZ" 2 494 "0x4060"
d G "OSC_TIMER1" 2 496 "1"
d G "OSC_INTRC" 2 497 "2"
d G "OSC_NORMAL" 2 498 "0"
d G "OSC_IDLE_MODE" 2 500 "0x80"
d G "OSC_PRIMARY_ENABLED" 2 501 "0x0400"
d G "OSC_LFINTRC_STABLE" 2 505 "1"
d G "OSC_HFINTRC_FREQ_LOCKED" 2 506 "2"
d G "OSC_HFINTRC_STABLE" 2 507 "4"
d G "OSC_RUNNING_FROM_FUSES" 2 508 "8" "Device is running from the clock defined by FOSC<2:0> of the CONFIG1 register"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 515 ""
v L "mode" 2 515 "int16" `215 
f B "setup_adc" 2 515 "void(int16 mode)" `214 
f N "read_adc" 2 516 ""
f B "read_adc" 2 516 "int8()" `216 
f N "read_adc" 2 517 ""
v L "mode" 2 517 "int8" `218 
f B "read_adc" 2 517 "int8(int8 mode)" `217 
f N "read_adc" 2 518 ""
f G "read_adc" 2 518 "int16()" `219 
f N "read_adc" 2 519 ""
v L "mode" 2 519 "int8" `220 
f G "read_adc" 2 519 "int16(int8 mode)" `219 
f N "adc_done" 2 520 ""
f B "adc_done" 2 520 "int8(int8 mode)" `219  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 522 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 523 "0x100"
d G "ADC_CLOCK_DIV_4" 2 524 "0x04"
d G "ADC_CLOCK_DIV_8" 2 525 "0x01"
d G "ADC_CLOCK_DIV_16" 2 526 "0x05"
d G "ADC_CLOCK_DIV_32" 2 527 "0x02"
d G "ADC_CLOCK_DIV_64" 2 528 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 529 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 531 "0x00"
d G "ADC_TAD_MUL_2" 2 532 "0x08"
d G "ADC_TAD_MUL_4" 2 533 "0x10"
d G "ADC_TAD_MUL_6" 2 534 "0x18"
d G "ADC_TAD_MUL_8" 2 535 "0x20"
d G "ADC_TAD_MUL_12" 2 536 "0x28"
d G "ADC_TAD_MUL_16" 2 537 "0x30"
d G "ADC_TAD_MUL_20" 2 538 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 541 ""
v L "pins" 2 541 "int32" `221 
f B "setup_adc_ports" 2 541 "void(int32 pins)" `220 
f N "setup_adc_ports" 2 542 ""
v L "pins" 2 542 "int32" `223 
v L "reference" 2 542 "int32" `224 
f B "setup_adc_ports" 2 542 "void(int32 pins,int32 reference)" `222 
f N "set_analog_pins" 2 543 ""
v L "pins" 2 543 "int32" `226 
f B "set_analog_pins" 2 543 "void(int32 pins)" `225 
f N "set_analog_pins" 2 544 ""
v L "pins" 2 544 "int32" `228 
v L "reference" 2 544 "int32" `229 
f B "set_analog_pins" 2 544 "void(int32 pins,int32 reference)" `227 
f N "set_adc_channel" 2 545 ""
v L "channel" 2 545 "int8" `231 
f B "set_adc_channel" 2 545 "void(int8 channel)" `230  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN3" 2 549 "0x80000" "| A4"
d G "sAN4" 2 550 "0x100000" "| C0"
d G "sAN5" 2 551 "0x200000" "| C1"
d G "sAN6" 2 552 "0x400000" "| C2"
d G "sAN7" 2 553 "0x800000" "| C3"
d G "sAN8" 2 554 "0x1" "| C6"
d G "sAN9" 2 555 "0x2" "| C7"
d G "sAN10" 2 556 "0x4" "| B4"
d G "sAN11" 2 557 "0x8" "| B5"
d G "NO_ANALOGS" 2 558 "0" "None"
d G "ALL_ANALOG" 2 559 "0xF00FF" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 2 562 "0x000" "| Range 0-Vdd"
d G "VSS_FVR" 2 563 "0x800" "| Range 0-FVR"
d G "VREF_VREF" 2 564 "0x500" "| Range VrefL-VrefH"
d G "VSS_VREF" 2 565 "0x400" "| Range 0-VrefH"
d G "VREF_VDD" 2 566 "0x100" "| Range VrefL-Vdd"
d G "DAC_CHANNEL" 2 570 "14"
d G "FVR_CHANNEL" 2 571 "15"
d G "ADC_START_AND_READ" 2 574 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 575 "1"
d G "ADC_READ_ONLY" 2 576 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 582 ""
v L "x" 2 582 "sint8" `233 
f B "abs" 2 582 "sint8(sint8 x)" `232 
f N "abs" 2 583 ""
v L "x" 2 583 "sint16" `235 
f B "abs" 2 583 "sint16(sint16 x)" `234 
f N "abs" 2 584 ""
v L "x" 2 584 "sint32" `237 
f B "abs" 2 584 "sint32(sint32 x)" `236 
f N "abs" 2 585 ""
v L "x" 2 585 "float" `239 
f B "abs" 2 585 "float(float x)" `238 
f N "_mul" 2 586 ""
v L "??65535" 2 586 "int8" `241 
v L "??65535" 2 586 "int8" `242 
f B "_mul" 2 586 "int16(int8 ,int8 )" `240 
f N "_mul" 2 587 ""
v L "??65535" 2 587 "sint8" `244 
v L "??65535" 2 587 "sint8" `245 
f B "_mul" 2 587 "sint16(sint8 ,sint8 )" `243 
f N "_mul" 2 588 ""
v L "??65535" 2 588 "int16" `247 
v L "??65535" 2 588 "int16" `248 
f B "_mul" 2 588 "int32(int16 ,int16 )" `246 
f N "_mul" 2 589 ""
v L "??65535" 2 589 "sint16" `250 
v L "??65535" 2 589 "sint16" `251 
f B "_mul" 2 589 "sint32(sint16 ,sint16 )" `249  "Memory Manipulation Prototypes:"
f N "read_bank" 2 592 ""
v L "bank" 2 592 "int8" `253 
v L "offset" 2 592 "int8" `254 
f B "read_bank" 2 592 "int8(int8 bank,int8 offset)" `252 
f N "write_bank" 2 593 ""
v L "bank" 2 593 "int8" `256 
v L "offset" 2 593 "int8" `257 
v L "value" 2 593 "int8" `258 
f B "write_bank" 2 593 "void(int8 bank,int8 offset,int8 value)" `255 
f N "strcpy" 2 594 ""
v L "dest" 2 594 "*int8" `260 
v L "src" 2 594 "*int8" `261 
f B "strcpy" 2 594 "void(*int8 dest,*int8 src)" `259 
f N "memset" 2 595 ""
v L "destination" 2 595 "*int8" `263 
v L "value" 2 595 "int8" `264 
v L "num" 2 595 "int16" `265 
f B "memset" 2 595 "void(*int8 destination,int8 value,int16 num)" `262 
f N "memcpy" 2 596 ""
v L "destination" 2 596 "*int8" `267 
v L "source" 2 596 "*int8" `268 
v L "num" 2 596 "int16" `269 
f B "memcpy" 2 596 "void(*int8 destination,*int8 source,int16 num)" `266  "String Prototypes:"
f N "toupper" 2 599 ""
v L "cvalue" 2 599 "int8" `271 
f B "toupper" 2 599 "int8(int8 cvalue)" `270 
f N "tolower" 2 600 ""
v L "cvalue" 2 600 "int8" `273 
f B "tolower" 2 600 "int8(int8 cvalue)" `272 
f N "sprintf" 2 601 ""
v L "string" 2 601 "*int8" `275 
v L "cstring" 2 601 "*int8" `276 
f B "sprintf" 2 601 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `274  "Data Manipulators Prototypes:"
f N "shift_left" 2 604 ""
v L "address" 2 604 "*int8" `279 
v L "bytes" 2 604 "int8" `280 
v L "value" 2 604 "int8" `281 
f B "shift_left" 2 604 "int8(*int8 address,int8 bytes,int8 value)" `278 
f N "shift_right" 2 605 ""
v L "address" 2 605 "*int8" `283 
v L "bytes" 2 605 "int8" `284 
v L "value" 2 605 "int8" `285 
f B "shift_right" 2 605 "int8(*int8 address,int8 bytes,int8 value)" `282 
f N "rotate_left" 2 606 ""
v L "address" 2 606 "*int8" `287 
v L "bytes" 2 606 "int8" `288 
f B "rotate_left" 2 606 "void(*int8 address,int8 bytes)" `286 
f N "rotate_right" 2 607 ""
v L "address" 2 607 "*int8" `290 
v L "bytes" 2 607 "int8" `291 
f B "rotate_right" 2 607 "void(*int8 address,int8 bytes)" `289 
f N "swap" 2 608 ""
v L "value" 2 608 "int8" `293 
f B "swap" 2 608 "void(int8 value)" `292 
f N "make8" 2 609 ""
v L "var" 2 609 "int16" `295 
v L "offset" 2 609 "int8" `296 
f B "make8" 2 609 "int8(int16 var,int8 offset)" `294 
f N "make8" 2 610 ""
v L "var" 2 610 "int32" `298 
v L "offset" 2 610 "int8" `299 
f B "make8" 2 610 "int8(int32 var,int8 offset)" `297 
f N "make16" 2 611 ""
v L "varhigh" 2 611 "int8" `301 
v L "varlow" 2 611 "int8" `302 
f B "make16" 2 611 "int16(int8 varhigh,int8 varlow)" `300 
f N "make32" 2 612 ""
v L "var1" 2 612 "int16" `304 
f B "make32" 2 612 "int32(int16 var1)" `303 
f N "make32" 2 613 ""
v L "var1" 2 613 "int16" `306 
v L "var2" 2 613 "int16" `307 
f B "make32" 2 613 "int32(int16 var1,int16 var2)" `305 
f N "make32" 2 614 ""
v L "var1" 2 614 "int16" `309 
v L "var2" 2 614 "int8" `310 
f B "make32" 2 614 "int32(int16 var1,int8 var2)" `308 
f N "make32" 2 615 ""
v L "var1" 2 615 "int16" `312 
v L "var2" 2 615 "int8" `313 
v L "var3" 2 615 "int8" `314 
f B "make32" 2 615 "int32(int16 var1,int8 var2,int8 var3)" `311 
f N "make32" 2 616 ""
v L "var1" 2 616 "int8" `316 
f B "make32" 2 616 "int32(int8 var1)" `315 
f N "make32" 2 617 ""
v L "var1" 2 617 "int8" `318 
v L "var2" 2 617 "int8" `319 
f B "make32" 2 617 "int32(int8 var1,int8 var2)" `317 
f N "make32" 2 618 ""
v L "var1" 2 618 "int8" `321 
v L "var2" 2 618 "int8" `322 
v L "var3" 2 618 "int8" `323 
f B "make32" 2 618 "int32(int8 var1,int8 var2,int8 var3)" `320 
f N "make32" 2 619 ""
v L "var1" 2 619 "int8" `325 
v L "var2" 2 619 "int8" `326 
v L "var3" 2 619 "int8" `327 
v L "var4" 2 619 "int8" `328 
f B "make32" 2 619 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `324 
f N "make32" 2 620 ""
v L "var1" 2 620 "int8" `330 
v L "var2" 2 620 "int16" `331 
f B "make32" 2 620 "int32(int8 var1,int16 var2)" `329 
f N "make32" 2 621 ""
v L "var1" 2 621 "int8" `333 
v L "var2" 2 621 "int16" `334 
v L "var3" 2 621 "int8" `335 
f B "make32" 2 621 "int32(int8 var1,int16 var2,int8 var3)" `332 
f N "make32" 2 622 ""
v L "var1" 2 622 "int8" `337 
v L "var2" 2 622 "int8" `338 
v L "var3" 2 622 "int16" `339 
f B "make32" 2 622 "int32(int8 var1,int8 var2,int16 var3)" `336 
f N "bit_set" 2 623 ""
v L "var" 2 623 "int8" `341 
v L "bit" 2 623 "int8" `342 
f B "bit_set" 2 623 "void(int8 var,int8 bit)" `340 
f N "bit_set" 2 624 ""
v L "var" 2 624 "int16" `344 
v L "bit" 2 624 "int8" `345 
f B "bit_set" 2 624 "void(int16 var,int8 bit)" `343 
f N "bit_set" 2 625 ""
v L "var" 2 625 "int32" `347 
v L "bit" 2 625 "int8" `348 
f B "bit_set" 2 625 "void(int32 var,int8 bit)" `346 
f N "bit_clear" 2 626 ""
v L "var" 2 626 "int8" `350 
v L "bit" 2 626 "int8" `351 
f B "bit_clear" 2 626 "void(int8 var,int8 bit)" `349 
f N "bit_clear" 2 627 ""
v L "var" 2 627 "int16" `353 
v L "bit" 2 627 "int8" `354 
f B "bit_clear" 2 627 "void(int16 var,int8 bit)" `352 
f N "bit_clear" 2 628 ""
v L "var" 2 628 "int32" `356 
v L "bit" 2 628 "int8" `357 
f B "bit_clear" 2 628 "void(int32 var,int8 bit)" `355 
f N "bit_test" 2 629 ""
v L "var" 2 629 "int8" `359 
v L "bit" 2 629 "int8" `360 
f B "bit_test" 2 629 "int8(int8 var,int8 bit)" `358 
f N "bit_test" 2 630 ""
v L "var" 2 630 "int16" `362 
v L "bit" 2 630 "int8" `363 
f B "bit_test" 2 630 "int8(int16 var,int8 bit)" `361 
f N "bit_test" 2 631 ""
v L "var" 2 631 "int32" `365 
v L "bit" 2 631 "int8" `366 
f B "bit_test" 2 631 "int8(int32 var,int8 bit)" `364  "#use delay() Prototypes:"
f N "delay_cycles" 2 634 ""
v L "count" 2 634 "int8" `368 
f B "delay_cycles" 2 634 "void(int8 count)" `367 
f N "delay_ms" 2 635 ""
v L "time" 2 635 "int16" `370 
f B "delay_ms" 2 635 "void(int16 time)" `369 
f N "delay_us" 2 636 ""
v L "time" 2 636 "int16" `372 
f B "delay_us" 2 636 "void(int16 time)" `371  "#use rs232() Prototypes:"
f N "putchar" 2 639 ""
v L "cdata" 2 639 "int8" `374 
f B "putchar" 2 639 "void(int8 cdata)" `373 
f N "putchar" 2 640 ""
v L "cdata" 2 640 "int8" `376 
v L "stream" 2 640 "int8" `377 
f B "putchar" 2 640 "void(int8 cdata,int8 stream)" `375 
f N "puts" 2 641 ""
v L "string" 2 641 "*int8" `379 
f B "puts" 2 641 "void(*int8 string)" `378 
f N "puts" 2 642 ""
v L "string" 2 642 "*int8" `381 
v L "stream" 2 642 "int8" `382 
f B "puts" 2 642 "void(*int8 string,int8 stream)" `380 
f N "getch" 2 643 ""
f B "getch" 2 643 "int8()" `383 
f N "getch" 2 644 ""
v L "stream" 2 644 "int8" `385 
f B "getch" 2 644 "int8(int8 stream)" `384 
f N "gets" 2 645 ""
v L "string" 2 645 "*int8" `387 
f B "gets" 2 645 "void(*int8 string)" `386 
f N "gets" 2 646 ""
v L "string" 2 646 "*int8" `389 
v L "stream" 2 646 "int8" `390 
f B "gets" 2 646 "void(*int8 string,int8 stream)" `388 
f N "kbhit" 2 647 ""
f B "kbhit" 2 647 "int8()" `391 
f N "kbhit" 2 648 ""
v L "stream" 2 648 "int8" `393 
f B "kbhit" 2 648 "int8(int8 stream)" `392 
f N "printf" 2 649 ""
v L "string" 2 649 "*int8" `395 
f B "printf" 2 649 "void(*int8 string,*int8 _VA_LIST)" `394 
f N "fprintf" 2 650 ""
v L "stream" 2 650 "int8" `398 
v L "string" 2 650 "*int8" `399 
f B "fprintf" 2 650 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `397 
f N "putc_send" 2 651 ""
f B "putc_send" 2 651 "void()" `401 
f N "fputc_send" 2 652 ""
v L "stream" 2 652 "int8" `403 
f B "fputc_send" 2 652 "void(int8 stream)" `402 
f N "rcv_buffer_full" 2 653 ""
f B "rcv_buffer_full" 2 653 "int8()" `404 
f N "rcv_buffer_full" 2 654 ""
v L "stream" 2 654 "int8" `406 
f B "rcv_buffer_full" 2 654 "int8(int8 stream)" `405 
f N "rcv_buffer_bytes" 2 655 ""
f B "rcv_buffer_bytes" 2 655 "int16()" `407 
f N "rcv_buffer_bytes" 2 656 ""
v L "stream" 2 656 "int8" `409 
f B "rcv_buffer_bytes" 2 656 "int16(int8 stream)" `408 
f N "tx_buffer_full" 2 657 ""
f B "tx_buffer_full" 2 657 "int8()" `410 
f N "tx_buffer_full" 2 658 ""
v L "stream" 2 658 "int8" `412 
f B "tx_buffer_full" 2 658 "int8(int8 stream)" `411 
f N "tx_buffer_bytes" 2 659 ""
f B "tx_buffer_bytes" 2 659 "int16()" `413 
f N "tx_buffer_bytes" 2 660 ""
v L "stream" 2 660 "int8" `415 
f B "tx_buffer_bytes" 2 660 "int16(int8 stream)" `414  "#use i2c() Prototypes:"
f N "i2c_read" 2 663 ""
f B "i2c_read" 2 663 "int8()" `416 
f N "i2c_read" 2 664 ""
v L "ack" 2 664 "int8" `418 
f B "i2c_read" 2 664 "int8(int8 ack)" `417 
f N "i2c_read" 2 665 ""
v L "stream" 2 665 "int8" `420 
v L "ack" 2 665 "int8" `421 
f B "i2c_read" 2 665 "int8(int8 stream,int8 ack)" `419 
f N "i2c_write" 2 666 ""
v L "data" 2 666 "int8" `423 
f B "i2c_write" 2 666 "int8(int8 data)" `422 
f N "i2c_write" 2 667 ""
v L "stream" 2 667 "int8" `425 
v L "data" 2 667 "int8" `426 
f B "i2c_write" 2 667 "int8(int8 stream,int8 data)" `424 
f N "i2c_start" 2 668 ""
f B "i2c_start" 2 668 "void()" `427 
f N "i2c_start" 2 669 ""
v L "stream" 2 669 "int8" `429 
f B "i2c_start" 2 669 "void(int8 stream)" `428 
f N "i2c_start" 2 670 ""
v L "stream" 2 670 "int8" `431 
v L "restart" 2 670 "int8" `432 
f B "i2c_start" 2 670 "void(int8 stream,int8 restart)" `430 
f N "i2c_stop" 2 671 ""
f B "i2c_stop" 2 671 "void()" `433 
f N "i2c_stop" 2 672 ""
v L "stream" 2 672 "int8" `435 
f B "i2c_stop" 2 672 "void(int8 stream)" `434 
f N "i2c_isr_state" 2 673 ""
f B "i2c_isr_state" 2 673 "int8()" `436 
f N "i2c_slaveaddr" 2 674 ""
v L "addr" 2 674 "int8" `438 
f B "i2c_slaveaddr" 2 674 "void(int8 addr)" `437 
f N "i2c_slaveaddr" 2 675 ""
v L "stream" 2 675 "int8" `440 
v L "addr" 2 675 "int8" `441 
f B "i2c_slaveaddr" 2 675 "void(int8 stream,int8 addr)" `439 
f N "i2c_poll" 2 676 ""
f B "i2c_poll" 2 676 "int8()" `442 
f N "i2c_poll" 2 677 ""
v L "stream" 2 677 "int8" `444 
f B "i2c_poll" 2 677 "int8(int8 stream)" `443 
f N "i2c_init" 2 678 ""
v L "baud" 2 678 "int32" `446 
f B "i2c_init" 2 678 "void(int32 baud)" `445 
f N "i2c_init" 2 679 ""
v L "stream" 2 679 "int8" `448 
v L "baud" 2 679 "int32" `449 
f B "i2c_init" 2 679 "void(int8 stream,int32 baud)" `447  "#use spi() Prototypes:"
f N "spi_xfer" 2 682 ""
f B "spi_xfer" 2 682 "int8()" `450 
f N "spi_xfer" 2 683 ""
f G "spi_xfer" 2 683 "int16()" `451 
f N "spi_xfer" 2 684 ""
f G "spi_xfer" 2 684 "int32()" `451 
f N "spi_xfer" 2 685 ""
v L "data" 2 685 "int8" `452 
f B "spi_xfer" 2 685 "int8(int8 data)" `451 
f N "spi_xfer" 2 686 ""
v L "data" 2 686 "int16" `454 
f B "spi_xfer" 2 686 "int16(int16 data)" `453 
f N "spi_xfer" 2 687 ""
v L "data" 2 687 "int32" `456 
f B "spi_xfer" 2 687 "int32(int32 data)" `455 
f N "spi_xfer" 2 688 ""
v L "stream" 2 688 "int8" `458 
v L "data" 2 688 "int8" `459 
f B "spi_xfer" 2 688 "int8(int8 stream,int8 data)" `457 
f N "spi_xfer" 2 689 ""
v L "stream" 2 689 "int8" `461 
v L "data" 2 689 "int16" `462 
f B "spi_xfer" 2 689 "int16(int8 stream,int16 data)" `460 
f N "spi_xfer" 2 690 ""
v L "stream" 2 690 "int8" `464 
v L "data" 2 690 "int32" `465 
f B "spi_xfer" 2 690 "int32(int8 stream,int32 data)" `463 
f N "spi_xfer" 2 691 ""
v L "stream" 2 691 "int8" `467 
v L "data" 2 691 "int8" `468 
v L "bits" 2 691 "int8" `469 
f B "spi_xfer" 2 691 "int8(int8 stream,int8 data,int8 bits)" `466 
f N "spi_xfer" 2 692 ""
v L "stream" 2 692 "int8" `471 
v L "data" 2 692 "int16" `472 
v L "bits" 2 692 "int8" `473 
f B "spi_xfer" 2 692 "int16(int8 stream,int16 data,int8 bits)" `470 
f N "spi_xfer" 2 693 ""
v L "stream" 2 693 "int8" `475 
v L "data" 2 693 "int32" `476 
v L "bits" 2 693 "int8" `477 
f B "spi_xfer" 2 693 "int32(int8 stream,int32 data,int8 bits)" `474 
f N "spi_init" 2 694 ""
v L "baud" 2 694 "int32" `479 
f B "spi_init" 2 694 "void(int32 baud)" `478 
f N "spi_init" 2 695 ""
v L "stream" 2 695 "int8" `481 
v L "baud" 2 695 "int32" `482 
f B "spi_init" 2 695 "void(int8 stream,int32 baud)" `480 
f N "spi_speed" 2 696 ""
v L "baud" 2 696 "int32" `484 
f B "spi_speed" 2 696 "void(int32 baud)" `483 
f N "spi_speed" 2 697 ""
v L "stream" 2 697 "int8" `486 
v L "baud" 2 697 "int32" `487 
f B "spi_speed" 2 697 "void(int8 stream,int32 baud)" `485 
f N "spi_speed" 2 698 ""
v L "stream" 2 698 "int8" `489 
v L "baud" 2 698 "int32" `490 
v L "clock" 2 698 "int32" `491 
f B "spi_speed" 2 698 "void(int8 stream,int32 baud,int32 clock)" `488 
f N "spi_prewrite" 2 699 ""
v L "data" 2 699 "int8" `493 
f B "spi_prewrite" 2 699 "void(int8 data)" `492 
f N "spi_prewrite" 2 700 ""
v L "data" 2 700 "int16" `495 
f B "spi_prewrite" 2 700 "void(int16 data)" `494 
f N "spi_prewrite" 2 701 ""
v L "data" 2 701 "int32" `497 
f B "spi_prewrite" 2 701 "void(int32 data)" `496 
f N "spi_prewrite" 2 702 ""
v L "??65535" 2 702 "int8" `499 
v L "data" 2 702 "int8" `500 
f B "spi_prewrite" 2 702 "void(int8 ,int8 data)" `498 
f N "spi_prewrite" 2 703 ""
v L "??65535" 2 703 "int8" `502 
v L "data" 2 703 "int16" `503 
f B "spi_prewrite" 2 703 "void(int8 ,int16 data)" `501 
f N "spi_prewrite" 2 704 ""
v L "??65535" 2 704 "int8" `505 
v L "data" 2 704 "int32" `506 
f B "spi_prewrite" 2 704 "void(int8 ,int32 data)" `504 
f N "spi_xfer_in" 2 705 ""
f B "spi_xfer_in" 2 705 "int8()" `507 
f N "spi_xfer_in" 2 706 ""
f G "spi_xfer_in" 2 706 "int16()" `508 
f N "spi_xfer_in" 2 707 ""
f G "spi_xfer_in" 2 707 "int32()" `508 
f N "spi_xfer_in" 2 708 ""
v L "bits" 2 708 "int8" `509 
f B "spi_xfer_in" 2 708 "int8(int8 bits)" `508 
f N "spi_xfer_in" 2 709 ""
v L "bits" 2 709 "int8" `511 
f G "spi_xfer_in" 2 709 "int16(int8 bits)" `510 
f N "spi_xfer_in" 2 710 ""
v L "bits" 2 710 "int8" `511 
f G "spi_xfer_in" 2 710 "int32(int8 bits)" `510 
f N "spi_xfer_in" 2 711 ""
v L "stream" 2 711 "int8" `511 
v L "bits" 2 711 "int8" `512 
f B "spi_xfer_in" 2 711 "int8(int8 stream,int8 bits)" `510 
f N "spi_xfer_in" 2 712 ""
v L "stream" 2 712 "int8" `511 
v L "bits" 2 712 "int8" `515 
f G "spi_xfer_in" 2 712 "int16(int8 stream,int8 bits)" `513 
f N "spi_xfer_in" 2 713 ""
v L "stream" 2 713 "int8" `511 
v L "bits" 2 713 "int8" `515 
f G "spi_xfer_in" 2 713 "int32(int8 stream,int8 bits)" `513  "#use rtos() Prototypes:"
f N "rtos_run" 2 716 ""
f B "rtos_run" 2 716 "void(int8 stream,int8 bits)" `513 
f N "rtos_yield" 2 717 ""
f B "rtos_yield" 2 717 "void(int8 bits)" `514 
f N "rtos_enable" 2 718 ""
v L "task" 2 718 "int8" `516 
f B "rtos_enable" 2 718 "void(int8 task)" `515 
f N "rtos_disable" 2 719 ""
v L "task" 2 719 "int8" `518 
f B "rtos_disable" 2 719 "void(int8 task)" `517 
f N "rtos_terminate" 2 720 ""
f B "rtos_terminate" 2 720 "void()" `519 
f N "rtos_await" 2 721 ""
v L "flag" 2 721 "int8" `521 
f B "rtos_await" 2 721 "void(int8 flag)" `520 
f N "rtos_wait" 2 722 ""
v L "sem" 2 722 "int8" `523 
f B "rtos_wait" 2 722 "void(int8 sem)" `522 
f N "rtos_signal" 2 723 ""
v L "sem" 2 723 "int8" `525 
f B "rtos_signal" 2 723 "void(int8 sem)" `524 
f N "rtos_msg_send" 2 724 ""
v L "task" 2 724 "int8" `527 
v L "msg" 2 724 "int8" `528 
f B "rtos_msg_send" 2 724 "void(int8 task,int8 msg)" `526 
f N "rtos_msg_read" 2 725 ""
f B "rtos_msg_read" 2 725 "int8()" `529 
f N "rtos_msg_poll" 2 726 ""
f B "rtos_msg_poll" 2 726 "int8()" `530 
f N "rtos_overrun" 2 727 ""
v L "task" 2 727 "int8" `532 
f B "rtos_overrun" 2 727 "int8(int8 task)" `531 
f N "rtos_stats" 2 728 ""
v L "task" 2 728 "int8" `534 
v L "stat" 2 728 "*int8" `535 
f B "rtos_stats" 2 728 "void(int8 task,*int8 stat)" `533  "#use timer() Prototypes:"
f N "get_ticks" 2 731 ""
f B "get_ticks" 2 731 "int8()" `536 
f N "get_ticks" 2 732 ""
f G "get_ticks" 2 732 "int16()" `537 
f N "get_ticks" 2 733 ""
f G "get_ticks" 2 733 "int32()" `537 
f N "get_ticks" 2 734 ""
v L "stream" 2 734 "int8" `538 
f B "get_ticks" 2 734 "int8(int8 stream)" `537 
f N "get_ticks" 2 735 ""
v L "stream" 2 735 "int8" `540 
f G "get_ticks" 2 735 "int16(int8 stream)" `539 
f N "get_ticks" 2 736 ""
v L "stream" 2 736 "int8" `540 
f G "get_ticks" 2 736 "int32(int8 stream)" `539 
f N "set_ticks" 2 737 ""
v L "value" 2 737 "int8" `540 
f B "set_ticks" 2 737 "void(int8 value)" `539 
f N "set_ticks" 2 738 ""
v L "value" 2 738 "int16" `542 
f B "set_ticks" 2 738 "void(int16 value)" `541 
f N "set_ticks" 2 739 ""
v L "value" 2 739 "int32" `544 
f B "set_ticks" 2 739 "void(int32 value)" `543 
f N "set_ticks" 2 740 ""
v L "stream" 2 740 "int8" `546 
v L "value" 2 740 "int8" `547 
f B "set_ticks" 2 740 "void(int8 stream,int8 value)" `545 
f N "set_ticks" 2 741 ""
v L "stream" 2 741 "int8" `549 
v L "value" 2 741 "int16" `550 
f B "set_ticks" 2 741 "void(int8 stream,int16 value)" `548 
f N "set_ticks" 2 742 ""
v L "stream" 2 742 "int8" `552 
v L "value" 2 742 "int32" `553 
f B "set_ticks" 2 742 "void(int8 stream,int32 value)" `551  "#use pwm() Prototypes:"
f N "pwm_on" 2 745 ""
f B "pwm_on" 2 745 "void()" `554 
f N "pwm_on" 2 746 ""
v L "stream" 2 746 "int8" `556 
f B "pwm_on" 2 746 "void(int8 stream)" `555 
f N "pwm_off" 2 747 ""
f B "pwm_off" 2 747 "void()" `557 
f N "pwm_off" 2 748 ""
v L "stream" 2 748 "int8" `559 
f B "pwm_off" 2 748 "void(int8 stream)" `558 
f N "pwm_set_duty" 2 749 ""
v L "duty" 2 749 "int16" `561 
f B "pwm_set_duty" 2 749 "void(int16 duty)" `560 
f N "pwm_set_duty" 2 750 ""
v L "stream" 2 750 "int8" `563 
v L "duty" 2 750 "int16" `564 
f B "pwm_set_duty" 2 750 "void(int8 stream,int16 duty)" `562 
f N "pwm_set_duty_percent" 2 751 ""
v L "percent" 2 751 "int16" `566 
f B "pwm_set_duty_percent" 2 751 "void(int16 percent)" `565 
f N "pwm_set_duty_percent" 2 752 ""
v L "stream" 2 752 "int8" `568 
v L "percent" 2 752 "int16" `569 
f B "pwm_set_duty_percent" 2 752 "void(int8 stream,int16 percent)" `567 
f N "pwm_set_frequency" 2 753 ""
v L "frequency" 2 753 "int32" `571 
f B "pwm_set_frequency" 2 753 "void(int32 frequency)" `570 
f N "pwm_set_frequency" 2 754 ""
v L "stream" 2 754 "int8" `573 
v L "frequency" 2 754 "int32" `574 
f B "pwm_set_frequency" 2 754 "void(int8 stream,int32 frequency)" `572  "#use capture() Prototypes:"
f N "get_capture_time" 2 757 ""
f B "get_capture_time" 2 757 "int16()" `575 
f N "get_capture_time" 2 758 ""
v L "stream" 2 758 "int8" `577 
f B "get_capture_time" 2 758 "int16(int8 stream)" `576 
f N "get_capture_event" 2 759 ""
f B "get_capture_event" 2 759 "int8()" `578 
f N "get_capture_event" 2 760 ""
v L "stream" 2 760 "int8" `580 
f B "get_capture_event" 2 760 "int8(int8 stream)" `579  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 773 ""
v L "address" 2 773 "int16" `582 
f B "goto_address" 2 773 "void(int16 address)" `581 
f N "label_address" 2 774 ""
v L "label" 2 774 "int16" `584 
f B "label_address" 2 774 "int16(int16 label)" `583  "Program Memory Prototypes:"
f N "read_program_memory" 2 777 ""
v L "address" 2 777 "int16" `586 
v L "dataptr" 2 777 "*int8" `587 
v L "count" 2 777 "int16" `588 
f B "read_program_memory" 2 777 "void(int16 address,*int8 dataptr,int16 count)" `585 
f N "read_program_eeprom" 2 778 ""
v L "address" 2 778 "int16" `590 
f B "read_program_eeprom" 2 778 "int16(int16 address)" `589 
f N "erase_program_eeprom" 2 779 ""
v L "address" 2 779 "int16" `592 
f B "erase_program_eeprom" 2 779 "void(int16 address)" `591 
f N "write_program_memory" 2 780 ""
v L "address" 2 780 "int16" `594 
v L "dataptr" 2 780 "*int8" `595 
v L "count" 2 780 "int16" `596 
f B "write_program_memory" 2 780 "void(int16 address,*int8 dataptr,int16 count)" `593 
f N "write_program_eeprom" 2 781 ""
v L "address" 2 781 "int16" `598 
v L "data" 2 781 "int16" `599 
f B "write_program_eeprom" 2 781 "void(int16 address,int16 data)" `597  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 786 "unsigned int16"
f N "read_eeprom" 2 791 ""
v L "address" 2 791 "int16" `601 
f B "read_eeprom" 2 791 "int8(int16 address)" `600 
f N "write_eeprom" 2 792 ""
v L "address" 2 792 "int16" `603 
v L "value" 2 792 "int8" `604 
f B "write_eeprom" 2 792 "void(int16 address,int8 value)" `602  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 799 ""
v L "interrupt" 2 799 "int32" `606 
f B "enable_interrupts" 2 799 "void(int32 interrupt)" `605 
f N "disable_interrupts" 2 800 ""
v L "interrupt" 2 800 "int32" `608 
f B "disable_interrupts" 2 800 "void(int32 interrupt)" `607 
f N "clear_interrupt" 2 801 ""
v L "interrupt" 2 801 "int32" `610 
f B "clear_interrupt" 2 801 "void(int32 interrupt)" `609 
f N "interrupt_active" 2 802 ""
v L "interrupt" 2 802 "int32" `612 
f B "interrupt_active" 2 802 "int8(int32 interrupt)" `611 
f N "interrupt_enabled" 2 803 ""
v L "interrupt" 2 803 "int32" `614 
f B "interrupt_enabled" 2 803 "int8(int32 interrupt)" `613 
f N "ext_int_edge" 2 804 ""
v L "source" 2 804 "int8" `616 
v L "edge" 2 804 "int8" `617 
f B "ext_int_edge" 2 804 "void(int8 source,int8 edge)" `615 
f N "jump_to_isr" 2 805 ""
v L "address" 2 805 "int16" `619 
f B "jump_to_isr" 2 805 "void(int16 address)" `618  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 807 "0x40"
d G "H_TO_L" 2 808 "0"
d G "GLOBAL" 2 810 "0xF2C0"
d G "PERIPH" 2 811 "0xF240"
d G "INT_RTCC" 2 812 "0x00F220"
d G "INT_TIMER0" 2 813 "0x00F220"
d G "INT_TIMER1" 2 814 "0x009D01"
d G "INT_TIMER2" 2 815 "0x009D02"
d G "INT_TIMER3" 2 816 "0x00A002"
d G "INT_EXT_L2H" 2 817 "0x5000F210"
d G "INT_EXT_H2L" 2 818 "0x6000F210"
d G "INT_EXT" 2 819 "0x00F210"
d G "INT_EXT1_L2H" 2 820 "0x5001F008"
d G "INT_EXT1_H2L" 2 821 "0x6001F008"
d G "INT_EXT1" 2 822 "0x00F008"
d G "INT_EXT2_L2H" 2 823 "0x5002F010"
d G "INT_EXT2_H2L" 2 824 "0x6002F010"
d G "INT_EXT2" 2 825 "0x00F010"
d G "INT_AD" 2 826 "0x009D40"
d G "INT_RDA" 2 827 "0x009D20"
d G "INT_TBE" 2 828 "0x009D10"
d G "INT_SSP" 2 829 "0x009D08"
d G "INT_CCP1" 2 830 "0x009D04"
d G "INT_BUSCOL" 2 831 "0x00A008"
d G "INT_COMP" 2 832 "0x00A040"
d G "INT_EEPROM" 2 833 "0x00A010"
d G "INT_OSCF" 2 834 "0x00A080"
d G "INT_COMP2" 2 835 "0x00A020"
d G "INT_USB" 2 836 "0x00A004"
d G "INT_RA" 2 837 "0x00FFF208"
d G "INT_RB" 2 838 "0x21FFF208"
d G "INT_RAB" 2 839 "0x02FFF208"
d G "INT_RA0" 2 840 "0x001F208"
d G "INT_RA1" 2 841 "0x002F208"
d G "INT_RA3" 2 842 "0x008F208"
d G "INT_RA4" 2 843 "0x010F208"
d G "INT_RA5" 2 844 "0x020F208"
d G "INT_RB4" 2 845 "0x110F208"
d G "INT_RB5" 2 846 "0x120F208"
d G "INT_RB6" 2 847 "0x140F208"
d G "INT_RB7" 2 848 "0x180F208"
F N "main" 0 3 ""
F G "main" 0 4 "void()" `624 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
